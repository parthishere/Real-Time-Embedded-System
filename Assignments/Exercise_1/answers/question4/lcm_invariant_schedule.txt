#define _GNU_SOURCE
#include <stdio.h>
#include <pthread.h>
#include <sched.h>
#include <unistd.h>
#include <stddef.h>
#include <stdlib.h>
#include <sys/sysinfo.h>
#include <stdbool.h>
#include <semaphore.h>

/*
 * S1 = (10, 20)
 * S1 = (20, 50)
 */

#define NUMBER_OF_TASKS 2

#define NANOSECONDS_PER_MICROSECONDS 1000
#define MICROSECONDS_PER_MILLISECONDS 1000
#define MILLISECONDS_PER_SECOND 1000

#define PERIOD_TIME_FOR_TASK_10MS
#define PERIOD_TIME_FOR_TASK_20MS
#define PERIOD_TIME_FOR_TASK_10MS

#define FIB_LIMIT_FOR_32_BIT 47

#define FIB_TEST_INPUT 10000



typedef struct
{
    int threadId;
} ThreadArgs_t;

typedef struct
{
    int period;
    int burst_time;
    int count_for_period;
    struct sched_param priority_param;
    void *(*thread_handle)(void *);
    pthread_t thread;
    ThreadArgs_t thread_args;
    void *return_Value;
    pthread_attr_t attribute;
    int target_cpu;
} RmTask_t;

typedef enum
{
    HIGH_PRIORITY_TASK = 0,
    MID_PRIORITY_TASK = 1,
    LOW_PRIORITY_TASK = 2
} taskPriority_t;

bool abortTest_10 = false, abortTest_20 = false;
sem_t semaphore_10ms, semaphore_20ms;
double overall_start_time, overall_stop_time;

double read_time(double *var)
{
    struct timeval tv;
    if (gettimeofday(&tv, NULL) != 0)
    {
        perror("readTOD");
        return 0.0;
    }
    else
    {
        *var = ((double)(((double)tv.tv_sec * 1000) + (((double)tv.tv_usec) / 1000.0)));
    }
    return (*var);
}



static void fib_test(double time_ms)
{
    static int fib1, fib2, fib;
    int j = 0;
    double start_time;
    double end_time;

    read_time(&start_time);
    
    while ((end_time - start_time) <= time_ms)
    {
        while (j < FIB_LIMIT_FOR_32_BIT)
        {
            if (j == 0)
            {
                fib = 1;
            }
            else
            {
                fib1 = fib2;
                fib2 = fib;
                fib = fib1 + fib2;
            }
            j++;
        }
        read_time(&end_time);
    }

}

void *thread10ms(void *args)
{
    RmTask_t *task_parameters  = (RmTask_t *)args;
    
    struct sched_param schedule_param;
    int policy;
    int cpu_mask = 0;
    double execution_complete_time_for_a_loop;
    double execution_start_time_for_a_loop;


    while (!abortTest_10)
    {

        sem_wait(&semaphore_10ms);
        read_time(&execution_start_time_for_a_loop);
    
        fib_test(task_parameters->burst_time);
        pthread_getschedparam(pthread_self(), &policy, &schedule_param);
        read_time(&execution_complete_time_for_a_loop);
        
        printf("Thread10 | priority = %d | time stamp(arrival) %lf msec | CPU burst time : %lf \n", schedule_param.sched_priority, (execution_start_time_for_a_loop - overall_start_time), (execution_complete_time_for_a_loop - execution_start_time_for_a_loop));
    }

    return NULL;
}

void *thread20ms(void *args)
{
    RmTask_t *task_parameters  = (RmTask_t *)args;

    struct sched_param schedule_param;
    int policy;
    int cpu_mask = 0;
    double execution_complete_time_for_a_loop;
    double execution_start_time_for_a_loop;


    while (!abortTest_20)
    {
        sem_wait(&semaphore_20ms);
        read_time(&execution_start_time_for_a_loop);
    
        fib_test(task_parameters->burst_time);
        pthread_getschedparam(pthread_self(), &policy, &schedule_param);
        read_time(&execution_complete_time_for_a_loop);
        printf("Thread20 | priority = %d | time stamp(arrival) %lf msec | CPU burst time : %lf \n", schedule_param.sched_priority, (execution_complete_time_for_a_loop - overall_start_time), (execution_complete_time_for_a_loop - execution_start_time_for_a_loop));
    }

    return NULL;
}

void print_scheduler(void)
{
    int schedType;
    schedType = sched_getscheduler(getpid());
    switch (schedType)
    {
    case SCHED_FIFO:
        printf("Pthread Policy is SCHED_FIFO\n");
        break;
    case SCHED_OTHER:
        printf("Pthread Policy is SCHED_OTHER\n");
        break;
    case SCHED_RR:
        printf("Pthread Policy is SCHED_OTHER\n");
        break;
    default:
        printf("Pthread Policy is UNKNOWN\n");
    }
}



int main()
{


    pthread_t threads[NUMBER_OF_TASKS];

    RmTask_t tasks[NUMBER_OF_TASKS] = {
        {.period = 20,     // ms
         .burst_time = 10, // ms
         .priority_param = {1},
         .thread = threads[0],
         .thread_handle = thread10ms,
         .thread_args = {0},
         .return_Value = NULL,
         .attribute = {0, 0},
         .target_cpu = 2},

        {.period = 50,
         .burst_time = 20,
         .priority_param = {2},
         .thread = threads[1],
         .thread_handle = thread20ms,
         .thread_args = {0},
         .attribute = {0, 0},
         .target_cpu = 0},

        // {.period = 100,
        //  .burst_time = 10,
        //  .priority_param = {3},
        //  .thread = threads[2],
        //  .thread_handle = thread_task,
        //  .thread_args = {0},
        //  .attribute = {0,0},
        //  .target_cpu = 0}
    };
    //Initialize Semaphore
    sem_init(&semaphore_10ms,0, 1);
    sem_init(&semaphore_20ms,0, 1);

    pthread_attr_t attribute_flags_for_main; // for schedular type, priority
    struct sched_param main_priority_param;

    cpu_set_t cpuset;
    int target_cpu = 1; // core we want to run our process on

    printf("This system has %d processors configured and %d processors available.\n", get_nprocs_conf(), get_nprocs());

    printf("Before adjustments to scheduling policy:\n");
    print_scheduler();

    CPU_ZERO(&cpuset); // clear all the cpus in cpuset

    int rt_max_prio = sched_get_priority_max(SCHED_FIFO);
    int rt_min_prio = sched_get_priority_min(SCHED_FIFO);

    main_priority_param.sched_priority = rt_max_prio;
    for (int i = 0; i < NUMBER_OF_TASKS; i++)
    {
        CPU_SET(tasks[i].target_cpu, &cpuset); // add target CPU to cpuset
        tasks[i].priority_param.sched_priority = rt_max_prio - (i+1);

        // initialize attributes
        pthread_attr_init(&tasks[i].attribute);

        pthread_attr_setinheritsched(&tasks[i].attribute, PTHREAD_EXPLICIT_SCHED);
        pthread_attr_setschedpolicy(&tasks[i].attribute, SCHED_FIFO);
        pthread_attr_setschedparam(&tasks[i].attribute, &tasks[i].priority_param);
    }

    pthread_attr_init(&attribute_flags_for_main);

    pthread_attr_setinheritsched(&attribute_flags_for_main, PTHREAD_EXPLICIT_SCHED);
    pthread_attr_setschedpolicy(&attribute_flags_for_main, SCHED_FIFO);

    // Main thread is already created we have to modify the priority and scheduling scheme
    int status_setting_schedular = sched_setscheduler(getpid(), SCHED_FIFO, &main_priority_param);
    if (status_setting_schedular)
    {
        printf("ERROR; sched_setscheduler rc is %d\n", status_setting_schedular);
        perror(NULL);
        exit(-1);
    }

    printf("After adjustments to scheduling policy:\n");
    print_scheduler();


    read_time(&overall_start_time);
    for (int i = 0; i < NUMBER_OF_TASKS; i++)
    {
        // Create a thread
        // First paramter is thread which we want to create
        // Second parameter is the flags that we want to give it to
        // third parameter is the routine we want to give
        // Fourth parameter is the value
        if (pthread_create(&tasks[i].thread, &tasks[i].attribute, tasks[i].thread_handle, &tasks[i]) != 0)
        {
            perror("Create_Fail");
        }

        
    }

    usleep(20000);
    sem_post(&semaphore_10ms);

    usleep(20000);
    sem_post(&semaphore_10ms);

    usleep(10000);
    abortTest_20 = true;
    sem_post(&semaphore_20ms);

    usleep(10000);
    sem_post(&semaphore_10ms);

    usleep(20000);
    abortTest_10 = true; // we are setting abort test here and then calling thread to execute as
    // it will check semaphore in the next iteration
    sem_post(&semaphore_10ms);
    usleep(20000);
    read_time(&overall_stop_time);

    printf("Test Conducted over %lf msec\n", (double)(overall_stop_time - overall_start_time));

    for (int i = 0; i < NUMBER_OF_TASKS; i++)
    {
        pthread_join(tasks[i].thread, (void *)&tasks[i].return_Value);
    }

    if (pthread_attr_destroy(&tasks[0].attribute) != 0)
        perror("attr destroy");
    if (pthread_attr_destroy(&tasks[1].attribute) != 0)
        perror("attr destroy");

    sem_destroy(&semaphore_10ms);
    sem_destroy(&semaphore_20ms);  
    // pthread_attr_destroy(&attribute_flags);
    return 0;
}
